**********
Quickstart
**********

The `fitgrid` workflow generally consists of 3 steps:

0. :code:`import fitgrid`
1. Read in an epochs table, which creates ``Epochs``.
2. Run a model using the ``Epochs``, which creates a ``FitGrid``.
3. Examine fit or diagnostic information.

Here are the three steps in detail:

==============
Read in epochs
==============

Epochs tables can come from a pandas DataFrame::

    epochs = fitgrid.epochs_from_dataframe(df)

or an HDF5 file::

    epochs = fitgrid.epochs_from_hdf('epochs_table.h5')

.. note::

    Input epochs tables are required to have at least two columns in the index:

    1. epoch identifier (default name :code:`Epoch_idx`)
    2. time identifier (default name :code:`Time`)

    The default column names above are `mkpy` conventions, so if your epochs table
    was generated by `mkpy`, you shouldn't need to change them. If, however, your
    epochs table calls them differently, say :code:`epoch_id` and :code:`time`, you
    need to let `fitgrid` know by setting the following constants after import::

        import fitgrid
        fitgrid.EPOCH_ID = 'epoch_id'
        fitgrid.TIME = 'time'


===========
Run a model
===========

As of now, only linear regression is available. To run linear regression on the
epochs, use the :code:`lm` method::

    grid = epochs.lm(RHS='continuous + categorical')

:code:`epochs.lm` runs linear regression for each channel, with the channel
data as the left hand side, and the right hand side given by the Patsy/R style
formula passed in using the :code:`RHS` parameter.

.. note::

    `FitGrid` assumes that the epochs table contains the following 32 channels:

    .. py:module:: fitgrid
    .. autodata:: CHANNELS

    Running a model on the epochs creates a `FitGrid` object, containing fit
    information, such as the betas, and diagnostic information,
    such as :math:`R^2`.
